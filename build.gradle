apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply from: 'gradle/integration-tests.gradle'

// Pull in the bintray gradle plugin for uploading releases
buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5' }
}

group = 'com.github.jruby-gradle'
version = '0.1.1'

if (System.env.RELEASE != '1') {
    version = "${version}-SNAPSHOT"
}
sourceCompatibility = '1.7'

// --- Could be in a separate gradle file
configurations {
    testJRubyPrepare
}

ext {
    jrubyClassPathFromConfiguration = { Configuration cfg ->
        def f = cfg.files.find { it.name.startsWith('jruby-complete-') }
        return  f?.absolutePath
    }
}

project.afterEvaluate {
    test {
        systemProperties TEST_JRUBY_CLASSPATH: "${jrubyClassPathFromConfiguration(configurations.testJRubyPrepare)}"

    }
}

// --- up to here

dependencies {
    testJRubyPrepare 'org.jruby:jruby-complete:1.7.13'
}

repositories {
    jcenter()
    mavenLocal()
    maven { url 'http://rubygems-proxy.torquebox.org/releases' }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'junit:junit:4.+'

    String spockVersion = "org.spockframework:spock-core:0.7-groovy-${gradle.gradleVersion.startsWith('1.')?'1.8':'2.0'}"

    testCompile (spockVersion) {
        exclude module : 'groovy-all'
    }

    integrationTestCompile (spockVersion) {
        exclude module : 'groovy-all'
    }
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }

    systemProperties TESTROOT : new File(buildDir,'tmp/test/unittests').absolutePath
    systemProperties TEST_GEM_DIR : new File(projectDir,'src/integTest/resources/gems').absolutePath
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath

}

integrationTest {
    systemProperties TESTROOT : new File(buildDir,'tmp/integrationTest/root').absolutePath
    systemProperties TEST_SCRIPT_DIR : new File(projectDir,'src/integTest/resources/scripts').absolutePath
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/integTest/resources/logback-test.xml').absolutePath

    if(gradle.startParameter.isOffline()) {
        systemProperties 'TESTS_ARE_OFFLINE' : '1'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

// Ensure we don't fail in CI or on a system without these values set in
// ~/.gradle/gradle.properties
if( !hasProperty( 'bintrayUser' ) )
  ext.bintrayUser = ''

if( !hasProperty( 'bintrayKey' ) )
  ext.bintrayKey = ''

bintray {
    user = project.bintrayUser
    key = project.bintrayKey
    publish = true
    dryRun = false
    configurations = ['archives']

    pkg {
        userOrg = 'jruby-gradle'
        repo = 'plugins'
        name = 'jruby-gradle-plugin'
        labels = ['jruby']

        version {
            name = project.version
            vcsTag = "v${project.version}"
            attributes = ['gradle-plugin' : 'com.github.jruby-gradle.base:com.github.jruby-gradle:jruby-gradle-plugin']
            desc = 'The purpose of plugin is to encapsulate useful Gradle functionality for JRuby projects.'

        }
    }
}
bintrayUpload.dependsOn assemble

// vim: ft=groovy
