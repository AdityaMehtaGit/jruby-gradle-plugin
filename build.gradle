apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'


buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5' }
}

group = 'com.github.jruby-gradle'
version = '0.1.4'
archivesBaseName = 'jruby-gradle-jar-plugin'

if (System.env.RELEASE != '1') {
    version = "${version}-SNAPSHOT"
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    jcenter()
    mavenLocal()
    maven { url 'http://dl.bintray.com/rtyler/jruby' }
}

configurations {
    testRepo
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.9+'
    runtime 'com.github.jengelman.gradle.plugins:shadow:1.1.2+'

    testCompile ("org.spockframework:spock-core:0.7-groovy-${gradle.gradleVersion.startsWith('1.')?'1.8':'2.0'}") {
        exclude module : 'groovy-all'
    }

    // For the testRepo tests I am locking the versions, instead of a open version, as it makes
    // unit testing easier, This does not affect the final artifact.
    // If you change values here, you need to update JRubyJarPluginSpec as well.
    testRepo ('org.jruby:jruby-complete:1.7.15') {
        transitive = false
    }
    testRepo ("org.spockframework:spock-core:0.7-groovy-2.0") {
        transitive = false
    }

    testRepo 'com.github.jengelman.gradle.plugins:shadow:1.1.2'

}

ext {
    testRepoDir = new File(buildDir,'tmp/test/repo' )
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }

    doFirst {
        copy {
            from project.configurations.testRepo.files
            into testRepoDir
        }
    }

    if(gradle.startParameter.isOffline()) {
        systemProperties 'TESTS_ARE_OFFLINE' : '1'
    }

    systemProperties TESTROOT : new File(buildDir,'tmp/test/unittests').absolutePath
    systemProperties TESTREPO_LOCATION : testRepoDir.absolutePath
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback-test.xml').absolutePath
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

// Ensure we don't fail in CI or on a system without these values set in
// ~/.gradle/gradle.properties
if (!hasProperty( 'bintrayUser' ))
  ext.bintrayUser = ''

if (!hasProperty( 'bintrayKey' ))
  ext.bintrayKey = ''

bintray {
    user = project.bintrayUser
    key = project.bintrayKey
    publish = true
    dryRun = false
    configurations = ['archives']

    pkg {
        userOrg = 'jruby-gradle'
        repo = 'plugins'
        name = 'jruby-gradle-jar-plugin'
        labels = ['jruby']

        version {
            name = project.version
            vcsTag = "v${project.version}"
            attributes = ['gradle-plugin' : 'com.github.jruby-gradle.jar:com.github.jruby-gradle:jruby-gradle-jar-plugin']
            desc = 'This plugin encapsulates java archive building functionality for JRuby Gradle projects'

        }
    }
}
bintrayUpload.dependsOn assemble

// vim: ft=groovy
